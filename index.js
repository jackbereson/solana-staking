const {
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
  sendAndConfirmTransaction,
  TransactionInstruction
} = require('@solana/web3.js');
const { serialize, deserialize } = require('borsh');
const fs = require('fs');

// K·∫øt n·ªëi ƒë·∫øn Solana (c√≥ th·ªÉ d√πng "https://api.devnet.solana.com" n·∫øu test tr√™n devnet)
const connection = new Connection("https://api.devnet.solana.com", "confirmed");

// ƒê·ªãa ch·ªâ Smart Contract c·ªßa b·∫°n
const PROGRAM_ID = new PublicKey("Dff8uDiJavctfuuqn4JvWpUTEKRevhbBz6CrXzRx43VH");

// ƒê·ªçc v√≠ t·ª´ file (ho·∫∑c c√≥ th·ªÉ d√πng Phantom Wallet)
const WALLET_PATH = "/Users/jackbereson/.config/solana/id.json"; // ƒê·ªïi th√†nh ƒë∆∞·ªùng d·∫´n keypair JSON c·ªßa b·∫°n
const secretKey = Uint8Array.from(JSON.parse(fs.readFileSync(WALLET_PATH)));
const payer = Keypair.fromSecretKey(secretKey);

console.log('payer',payer.publicKey.toBase58())

/**
 * Chuy·ªÉn ƒë·ªïi s·ªë th√†nh buffer 8 bytes (u64)
 */
function numberToBuffer(num) {
  const buffer = Buffer.alloc(8);
  buffer.writeBigUInt64LE(BigInt(num));
  return buffer;
}

/**
* G·ª≠i giao d·ªãch ƒë·∫øn Smart Contract ƒë·ªÉ c·∫≠p nh·∫≠t ho·∫∑c t·∫°o t√†i kho·∫£n m·ªõi
* @param {number} userId - ID c·ªßa user
* @param {number} amount - S·ªë ti·ªÅn mu·ªën n·∫°p v√†o t√†i kho·∫£n
*/
async function processDeposit(userId, amount) {
  console.log(`üîπ G·ª≠i giao d·ªãch ƒë·∫øn Smart Contract v·ªõi ID: ${userId}, Amount: ${amount}...`);

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh buffer
  const idBuffer = numberToBuffer(userId);
  const amountBuffer = numberToBuffer(amount);
  const instructionData = Buffer.concat([idBuffer, amountBuffer]);

  // T·∫°o instruction ƒë·ªÉ g·ª≠i ƒë·∫øn smart contract
  const transaction = new Transaction().add(
      new TransactionInstruction({
          keys: [], // Kh√¥ng c·∫ßn kh√≥a t√†i kho·∫£n n√†o
          programId: PROGRAM_ID,
          data: instructionData, // G·ª≠i d·ªØ li·ªáu id v√† amount
      })
  );

  // K√Ω v√† g·ª≠i transaction
  try {
      const txHash = await sendAndConfirmTransaction(connection, transaction, [payer]);
      console.log(`‚úÖ Giao d·ªãch th√†nh c√¥ng! Transaction Hash: ${txHash}`);
  } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i transaction:", error);
  }
}

/**
 * L·∫•y th√¥ng tin t√†i kho·∫£n User t·ª´ blockchain
 * @param {number} userId - ID c·ªßa user
 */
async function getUser(userId) {
  console.log(`üîπ ƒêang l·∫•y d·ªØ li·ªáu t√†i kho·∫£n cho User ID: ${userId}...`);

  // T·∫°o PublicKey c·ªßa t√†i kho·∫£n user (PDA - Program Derived Address)
  const [userPDA] = await PublicKey.findProgramAddress(
      [Buffer.from("user_account"), numberToBuffer(userId)],
      PROGRAM_ID
  );

  // L·∫•y th√¥ng tin t√†i kho·∫£n t·ª´ blockchain
  const accountInfo = await connection.getAccountInfo(userPDA);
  if (!accountInfo) {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
      return null;
  }

  // Gi·∫£i m√£ d·ªØ li·ªáu t·ª´ blockchain b·∫±ng Borsh
  const userAccount = deserialize(UserAccountSchema, UserAccount, accountInfo.data);

  console.log(`‚úÖ User ID: ${userAccount.id}, Balance: ${userAccount.balance}`);
  return userAccount;
}

// üìå G·ªçi th·ª≠
(async () => {
  await processDeposit(1, 500);  // N·∫°p 500 lamports v√†o User ID 1
  await getUser(1);              // L·∫•y th√¥ng tin User ID 1
})();